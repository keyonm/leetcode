{"id":1392755958,"question_id":733,"lang":"cpp","lang_name":"C++","time":"1 week, 4 days","timestamp":1726541850,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1392755958/","is_pending":"Not Pending","title":"Flood Fill","memory":"18 MB","code":"class Solution {\npublic:\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc,\n                                  int color) {\n        // If the source cell already has the same value as `color`, return the\n        // original image\n        if (image[sr][sc] == color) {\n            return image;\n        }\n\n        // Storing the original value of the starting cell\n        int oldcolor = image[sr][sc];\n        // Replacing the value of the starting cell with the specified color\n        image[sr][sc] = color;\n\n        // Calling the dfs function to replace the values of all connected cells\n        dfs(image, sr, sc, oldcolor, color);\n\n        // Return the modified image\n        return image;\n    }\n\n    void dfs(vector<vector<int>>& grid, int row, int col, int oldTarget,\n             int newTarget) {\n        // Defining the four cells adjacent to the starting cell\n        vector<vector<int>> adjacentCells = {\n            {0, 1},  // move right\n            {1, 0},  // move down\n            {-1, 0}, // move up\n            {0, -1}  // move left\n        };\n\n        // Get the dimensions of the grid\n        int gridLength = grid.size();\n        int totalCells = grid[0].size();\n\n        // For each cell in the list of adjacent cells\n        for (const auto& cellValue : adjacentCells) {\n            int r = row + cellValue[0];\n            int c = col + cellValue[1];\n\n            // If the adjacent cell is within the bounds of the grid\n            // and has the same value as the starting cell\n            if (r < gridLength && r >= 0 && c < totalCells && c >= 0 &&\n                grid[r][c] == oldTarget) {\n                // Replace the value of the adjacent cell with the specified\n                // target\n                grid[r][c] = newTarget;\n                // Recursively call the dfs function on the adjacent cell\n                dfs(grid, r, c, oldTarget, newTarget);\n            }\n        }\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flood-fill","has_notes":false,"flag_type":1}