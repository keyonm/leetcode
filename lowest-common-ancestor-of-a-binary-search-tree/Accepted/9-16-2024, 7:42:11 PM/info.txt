{"id":1392647620,"question_id":235,"lang":"java","lang_name":"Java","time":"1 week, 4 days","timestamp":1726530131,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1392647620/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"45 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        TreeNode node = root;\n        while (node != null) {\n            if (p.val < node.val && q.val < node.val) {\n                node = node.left;\n            } else if ((p.val < node.val && q.val > node.val) || (p.val > node.val && q.val < node.val)) {\n                return node;\n            } else if (node.val == p.val) {\n                return p;\n            } else if (node.val == q.val) {\n                return q;\n            } else {\n                node = node.right;\n            }\n        }\n\n        return null;\n    }\n}","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}